

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://forte-naop.github.io/</id>
  <title>Forte's Notes</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2025-02-01T03:19:33+09:00</updated>
  <author>
    <name>Forte</name>
    <uri>https://forte-naop.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://forte-naop.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://forte-naop.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 Forte </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>고정 크기 Heap 구현</title>
    <link href="https://forte-naop.github.io/posts/Heap_with_Array/" rel="alternate" type="text/html" title="고정 크기 Heap 구현" />
    <published>2025-01-31T07:49:01+09:00</published>
  
    <updated>2025-01-31T07:49:01+09:00</updated>
  
    <id>https://forte-naop.github.io/posts/Heap_with_Array/</id>
    <content type="text/html" src="https://forte-naop.github.io/posts/Heap_with_Array/" />
    <author>
      <name>Forte</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="Algorithm" />
    
  

  <summary>힙(Heap)
완전 이진 트리(Complete Binary Tree) 기반의 자료구조  
최댓값 또는 최솟값을 빠르게 접근 및 관리하는 데 사용된다.



1. 힙의 종류

🔹 최대 힙 (Max Heap)


  부모 노드는 항상 자식보다 크거나 같음
  루트 노드에는 가장 큰 값이 위치함
  삽입(push)과 삭제(pop) 후에도 이 속성이 유지됨


✅ 예시 (최대 힙)

        50
       /  \
     30    40
    /  \   /
   10  20 35



  top()을 하면 50이 반환됨
  pop()을 하면 50이 제거되고, 힙 속성이 유지됨


🔹 최소 힙 (Min Heap)


  부모 노드는 항상 자식보다 작거나 같음
  루트 노드에는 가장 작은 값이 위치...</summary>

  </entry>

  
  <entry>
    <title>Jekyll 시행 착오들 정리</title>
    <link href="https://forte-naop.github.io/posts/Trial_Error/" rel="alternate" type="text/html" title="Jekyll 시행 착오들 정리" />
    <published>2025-01-30T14:57:40+09:00</published>
  
    <updated>2025-01-30T14:57:40+09:00</updated>
  
    <id>https://forte-naop.github.io/posts/Trial_Error/</id>
    <content type="text/html" src="https://forte-naop.github.io/posts/Trial_Error/" />
    <author>
      <name>Forte</name>
    </author>

  
    
    <category term="Blogging" />
    
  

  <summary>Github Pages 시행착오들


  링크는 https:// 로 시작해야 htmlproofer 검사에서 오류가 나지 않음
  
    markdown 문서에서 상대경로로 포함된 리소스는 절대 경로로 변환해줘야 함.

     {% assign remote_url = &amp;quot;https://raw.githubusercontent.com/Forte-NaoP/Note/main/study/Unreal/lecture.md&amp;quot; %}
 {% assign img_url = remote_url | remove: &amp;quot;lecture.md&amp;quot; | append: &amp;quot;capture/&amp;quot; %}

 {% capture remote_content %} &amp;amp;lt;!--remote_content 변수에 remote resource 저장 --&amp;amp;gt;
...</summary>

  </entry>

  
  <entry>
    <title>Multi-level Feedack Queue 구현하기</title>
    <link href="https://forte-naop.github.io/posts/MFQ/" rel="alternate" type="text/html" title="Multi-level Feedack Queue 구현하기" />
    <published>2025-01-22T17:30:53+09:00</published>
  
    <updated>2025-01-22T17:30:53+09:00</updated>
  
    <id>https://forte-naop.github.io/posts/MFQ/</id>
    <content type="text/html" src="https://forte-naop.github.io/posts/MFQ/" />
    <author>
      <name>Forte</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="OS" />
    
  

  <summary>멀티 레벨 피드백 큐(MFQ) 스케줄링



코드 구조


  데이터 구조
    
      Process 구조체: 각 프로세스를 표현하는 구조체.
      waitq, finishedq, global_io_q: 대기 큐, 완료 큐, 글로벌 I/O 큐.
    
  
  스케줄러 클래스
    
      SchedulerBase (추상 클래스): 스케줄러의 기본 인터페이스 정의.
      Scheduler&amp;amp;lt;Container&amp;amp;gt; (템플릿 클래스): 특정 컨테이너(RR, SRTN, FCFS)를 기반으로 스케줄링을 수행.
    
  
  함수
    
      parse_process: 입력 파일을 파싱하여 프로세스를 생성하고 대기 큐에 삽입.
      add_process: 프로세스를...</summary>

  </entry>

  
  <entry>
    <title>태양계 시뮬레이션</title>
    <link href="https://forte-naop.github.io/posts/Solar_System/" rel="alternate" type="text/html" title="태양계 시뮬레이션" />
    <published>2025-01-19T20:12:54+09:00</published>
  
    <updated>2025-01-19T20:12:54+09:00</updated>
  
    <id>https://forte-naop.github.io/posts/Solar_System/</id>
    <content type="text/html" src="https://forte-naop.github.io/posts/Solar_System/" />
    <author>
      <name>Forte</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="Graphics" />
    
  

  <summary>구현



데이터 초기화

행성과 링의 데이터를 초기화하는 작업은 user_init() 함수에서 이루어집니다. 이 함수는 프로그램이 시작될 때 호출되어 필요한 데이터와 그래픽 리소스를 준비합니다.

1. 초기 위치 설정


  
    init_pos 초기화:

    for (int i = 0; i &amp;amp;lt; NUM_SPHERE; i++) {
    init_pos[i] = (float)rand() / (float)RAND_MAX * 2 * PI;
}
    

    
      각 행성의 초기 공전 위치를 랜덤 값으로 설정.
      초기 위치는 [0, 2π] 사이의 값으로, 행성이 시뮬레이션 시작 시 서로 다른 위치에 배치되도록 보장.
    
  


2. OpenGL 초기화


  
    ...</summary>

  </entry>

  
  <entry>
    <title>미니 쉘 만들기</title>
    <link href="https://forte-naop.github.io/posts/Swsh/" rel="alternate" type="text/html" title="미니 쉘 만들기" />
    <published>2025-01-10T17:01:45+09:00</published>
  
    <updated>2025-01-10T17:01:45+09:00</updated>
  
    <id>https://forte-naop.github.io/posts/Swsh/</id>
    <content type="text/html" src="https://forte-naop.github.io/posts/Swsh/" />
    <author>
      <name>Forte</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="C_CPP" />
    
  

  <summary>미니쉘 (swsh) 동작 과정

1. 초기 설정

1.1 환경 변수 설정


  custom_binary = &amp;quot;./commands/bin:&amp;quot;을 기존 PATH 환경 변수와 합쳐서 새로운 PATH를 설정한다.
  이를 통해 사용자가 실행 파일을 ./commands/bin/ 디렉토리에서 실행할 수 있도록 함.


1.2 시그널 핸들링


  SIGINT (Ctrl+C)와 SIGTSTP (Ctrl+Z)를 무시하도록 설정.
  SIGCHLD 시그널을 처리하여 종료된 자식 프로세스를 정리하는 핸들러 chld_handler 등록.


2. 입력 및 파싱

2.1 사용자 입력 처리


  read(0, input, 256)을 이용해 최대 256바이트까지 입력을 읽음.
  입력을 split_commands(input,...</summary>

  </entry>

</feed>


