[
  
  {
    "title": "최장 공통 부분 수열",
    "url": "/posts/LCS/",
    "categories": "Study, Algorithm",
    "tags": "DP, LCS",
    "date": "2025-01-30 01:19:44 +0900",
    





    
    "snippet": "최장 공통 부분 수열(LCS: Longest Common Subsequence)LCS 길이 구하기DP[i][j]: A[..i], B[..j]까지의 LCS길이      A[i] == B[j]: DP[i][j] = DP[i - 1][j - 1] + 1        A[i] != B[j]: DP[i][j] = max(DP[i - 1][j], DP[i][j ...",
    "content": "최장 공통 부분 수열(LCS: Longest Common Subsequence)LCS 길이 구하기DP[i][j]: A[..i], B[..j]까지의 LCS길이      A[i] == B[j]: DP[i][j] = DP[i - 1][j - 1] + 1        A[i] != B[j]: DP[i][j] = max(DP[i - 1][j], DP[i][j - 1])  LCS 문자열 구하기  역추적 (Backtracking) 방식DP 테이블을 이용해 (N, M)에서 (0, 0)까지 역추적하여 LCS를 복원.          A[i] == B[j]이면 LCS에 포함됨 → i-1, j-1로 이동      DP[i-1][j], DP[i][j-1]를 비교해 큰 쪽으로 이동      def LCS(A: str, B: str) -&gt; str:    N, M = len(A), len(B)    DP = [[0] * (M + 1) for _ in range(N + 1)]    # DP 테이블 채우기    for i in range(1, N + 1):        for j in range(1, M + 1):            if A[i - 1] == B[j - 1]:  # 문자가 같으면                DP[i][j] = DP[i - 1][j - 1] + 1            else:                DP[i][j] = max(DP[i - 1][j], DP[i][j - 1])    # LCS 역추적 (Backtracking)    i, j = N, M    lcs = []    while i &gt; 0 and j &gt; 0:        if A[i - 1] == B[j - 1]:  # 같은 문자는 LCS에 포함            lcs.append(A[i - 1])            i -= 1            j -= 1        elif DP[i - 1][j] &gt; DP[i][j - 1]:  # 위쪽이 크다면 위로 이동            i -= 1        else:  # 왼쪽이 크다면 왼쪽으로 이동            j -= 1    return ''.join(reversed(lcs))  # 역순으로 정렬하여 반환시간 복잡도  DP 테이블을 채우는 과정: O(N × M)  LCS 역추적 과정: O(N + M)  전체 시간 복잡도: O(N × M)"
  },
  
  {
    "title": "정렬 알고리즘",
    "url": "/posts/Sort/",
    "categories": "Study, Algorithm",
    "tags": "Sort",
    "date": "2025-01-30 01:15:21 +0900",
    





    
    "snippet": "정렬Bubble Sort인접한 두 원소를 비교하여 역순이면 교환한다.# seq = []# 총 n번 반복for i in range(n - 1, -1, -1):    is_swapped = False    # 매 반복 후에 seq[i + 1:]은 정렬된 상태이므로     # seq[:i] 까지만 확인    for j in range(i):        i...",
    "content": "정렬Bubble Sort인접한 두 원소를 비교하여 역순이면 교환한다.# seq = []# 총 n번 반복for i in range(n - 1, -1, -1):    is_swapped = False    # 매 반복 후에 seq[i + 1:]은 정렬된 상태이므로     # seq[:i] 까지만 확인    for j in range(i):        if seq[j] &gt; seq[j + 1]:            seq[j], seq[j + 1] = seq[j + 1] &gt; seq[j]            is_swapped = True    if not is_swapped:        breakSelection Sort현재 i = [0, n)일 때 seq[i:]에서 가장 작은 원소와 seq[i]를 교환한다.# seq = []for cur in range(n):    min_index = cur    for i in range(cur, n):        if seq[min_index] &gt; seq[i]:            min_index = i    seq[min_index], seq[cur] = seq[cur], seq[min_index]Insertion Sort현재 i = [1, n)일 때 seq[:i]에서 seq[i]를 삽입할 위치를 찾아 삽입한다.# seq = []for cur in range(1, n):    while cur &gt; 0 and seq[cur] &lt; seq[cur - 1]:        seq[cur], seq[cur - 1] = seq[cur - 1], seq[cur]        cur -= 1Quick Sortpivot을 기준으로 배열을 양쪽으로 나누어 정렬한다.# seq = []def partition(left, right):    # [left, right] 범위를 재배치    pivot = seq[(left + right) // 2]    while left &lt;= right:        # left를 pivot보다 큰 원소가 나타나는 지점까지 이동        while seq[left] &lt; pivot:            left += 1        # right를 pivot보다 작은 원소가 나타나느 지점까지 이동        while seq[right] &gt; pivot:            right -= 1                # 재배치가 안끝났으면        if left &lt;= right:            # seq[left]는 pivot보다 크고             # seq[right]는 pivot보다 작으므로             # 서로 교환            seq[left], seq[right] = seq[right], seq[left]            # 한 칸씩 이동            left, right = left + 1, right - 1    return leftdef quick_sort(left, right):    print(seq, left, right)    if left &gt;= right:        return        mid = partition(left, right)    quick_sort(left, mid - 1)    quick_sort(mid, right)Merge Sort배열을 두 부분으로 나누고 각 배열을 정렬한 뒤 하나로 합친다.# seq = []def merge(left, mid, right):    # seq[left:mid + 1]과 seq[mid + 1:right]를 합침    tmp = []    i, j = left, mid + 1    # 두 부분 배열에서 작은 값을 채워 넣음    while i &lt;= mid and j &lt;= right:        if seq[i] &lt; seq[j]:            tmp.append(seq[i])            i += 1        else:            tmp.append(seq[j])            j += 1    # 부분 배열에서 남은 것을 뒤에 추가함    while i &lt;= mid:         tmp.append(seq[i])        i += 1    while j &lt;= right:        tmp.append(seq[j])        j += 1    # 정렬된 배열을 원본 배열에 옮김    seq[left:left+len(tmp)] = tmp[:]def merge_sort(left, right):    # 길이 2 이상의 배열에 대해 분할    if left &gt;= right:        return    mid = (left + right) // 2    # 두 부분으로 나눔    merge_sort(left, mid)    merge_sort(mid + 1, right)    # 나눈 배열을 합침    merge(left, mid, right)"
  },
  
  {
    "title": "편집 거리",
    "url": "/posts/Edit_distance/",
    "categories": "Study, Algorithm",
    "tags": "DP",
    "date": "2025-01-30 01:02:24 +0900",
    





    
    "snippet": "편집 거리문자열 A를 문자열 B로 바꾸는데 필요한 연산(문자 추가, 삭제, 교체)의 최소 횟수DP[i][j]: A[..i]를 B[..j]로 편집하는 연산의 최소 횟수A[i] == B[j]라면 해당 위치에 대해서는 편집할 필요가 없으므로 DP[i][j] == DP[i - 1][j - 1]A[i] != B[j]라면 편집이 필요하다.추가하는 경우는 A[i]...",
    "content": "편집 거리문자열 A를 문자열 B로 바꾸는데 필요한 연산(문자 추가, 삭제, 교체)의 최소 횟수DP[i][j]: A[..i]를 B[..j]로 편집하는 연산의 최소 횟수A[i] == B[j]라면 해당 위치에 대해서는 편집할 필요가 없으므로 DP[i][j] == DP[i - 1][j - 1]A[i] != B[j]라면 편집이 필요하다.추가하는 경우는 A[i]에 문자열을 하나 추가해서 B[j]가 되어야 하므로 DP[i][j - 1] + 1, 즉 A[..i]를 B[..j - 1]로 변경하는 최소 횟수에 1을 더해준다.변경은 A[i]를 B[j]로 바꾸는 것이므로 DP[i - 1][j - 1] + 1삭제는 DP[i - 1][j] + 1이 된다.(A[..i - 1]로 B[j]를 만들었으므로 A[i]를 삭제)"
  },
  
  {
    "title": "위상 정렬",
    "url": "/posts/Topology_Sort/",
    "categories": "Study, Algorithm",
    "tags": "Sort",
    "date": "2025-01-30 00:01:14 +0900",
    





    
    "snippet": "위상정렬비순환 유향 그래프(DAG)에 대해서 정점을 선형으로 정렬하는 것각 노드에 선행 조건이 존재할 때 사용 가능정렬 방법  각 노드의 진입 차수 기록  진입 차수가 0인 정점을 큐에 삽입  큐에 담긴 정점에서 나가는 간선을 제거하고 해당 간선에 연결된 정점의 진입 차수를 감소  2-3과정을 큐가 비거나 모든 정점을 탐색할 때까지 반복구현graph ...",
    "content": "위상정렬비순환 유향 그래프(DAG)에 대해서 정점을 선형으로 정렬하는 것각 노드에 선행 조건이 존재할 때 사용 가능정렬 방법  각 노드의 진입 차수 기록  진입 차수가 0인 정점을 큐에 삽입  큐에 담긴 정점에서 나가는 간선을 제거하고 해당 간선에 연결된 정점의 진입 차수를 감소  2-3과정을 큐가 비거나 모든 정점을 탐색할 때까지 반복구현graph = defaultdict(list)indegree = [0] * (n + 1)# 인접 리스트 및 진입 차수 초기화# for _ in range(k):#     a, b = map(int, input().split())#     graph[a].append(b)#     indegree[b] += 1# 진입 차수 0인 정점 큐에 추가q = deque(filter(lambda x: indegree[x] == 0, range(1, n + 1)))while q:    cur = st.popleft()    print(q)    if cur in graph:        for nxt in graph[cur]:            indegree[nxt] -= 1            if indegree[nxt] == 0:                st.append(nxt)"
  },
  
  {
    "title": "OOP 정리",
    "url": "/posts/OOP/",
    "categories": "Study, OOP",
    "tags": "OOP",
    "date": "2025-01-29 23:56:56 +0900",
    





    
    "snippet": "OOP특징      추상화    대상의 공통적인 특성들을 묶어 표현하는 것 (abstract, interface class)        상속          기존 클래스의 속성과 메서드를 물려받는 것      코드 재사용성과 확장성을 높임      부모 클래스의 public, protected 멤버를 상속받는다.            캡슐화      ...",
    "content": "OOP특징      추상화    대상의 공통적인 특성들을 묶어 표현하는 것 (abstract, interface class)        상속          기존 클래스의 속성과 메서드를 물려받는 것      코드 재사용성과 확장성을 높임      부모 클래스의 public, protected 멤버를 상속받는다.            캡슐화          데이터와 메서드를 묶고, 데이터에 대한 직접 접근을 막는 것            다형성          같은 이름의 메서드나 연산자가 다른 동작을 하는 것      오버로딩과 오버라이딩을 통해 구현                  오버로딩: 이름은 같지만 시그니쳐가 다른 것          오버라이딩: 상위 클래스의 메소드를 재정의 하는 것                    SOLID 원칙      단일 책임 원칙 (SRP)    클래스는 단 하나의 책임을 가지고 하나의 이유로만 변경되어야 한다.        개방 폐쇄 원칙 (OCP)    확장에는 열려 있고 수정에는 닫혀 있어야 한다. 기존 코드를 수정하지 않고 기능을 추가할 수 있어야 한다.        리스코프 치환 원칙 (LSP)    상위 타입의 객체를 하위 타입으로 대체해도 정상적으로 동작해야 한다.        인터페이스 분리 원칙 (ISP)    클라이언트는 자신이 사용하지 않는 메서드에 의존하지 않아야 한다. 인터페이스를 세분화하여 클라이언트가 필요한 기능만 사용할 수 있도록 제한한다.        의존성 역전 원칙 (DIP)    고수준 모듈(비즈니스 로직 등)은 저수준 모듈(구현 세부 사항)에 의존해서는 안 된다. 고수준, 저수준 모두 둘 다 추상화(인터페이스나 추상 클래스)에 의존해야 한다.    DIP 위반     class EmailService {     public:         void SendEmail(const string&amp; message) {             cout &lt;&lt; \"Sending Email: \" &lt;&lt; message &lt;&lt; endl;         } }; // 고수준 모듈: Notification은 EmailService에 직접 의존 class Notification {     private:         EmailService emailService; // 저수준 모듈에 직접 의존     public:         void Notify(const string&amp; message) {             emailService.SendEmail(message); // EmailService에 직접 접근         } };        DIP 적용     class IMessageService {     public:         virtual void SendMessage(const std::string&amp; message) = 0; }; // 고수준 모듈 class Notification {     private:         IMessageService* messageService;     public:         Notification(IMessageService* service) : messageService(service) {}         void Notify(const std::string&amp; message) {             messageService-&gt;SendMessage(message);         } }; // 저수준 모듈 class EmailService : public IMessageService {     public:         void SendMessage(const std::string&amp; message) override {             // 이메일 전송 로직         } };      "
  },
  
  {
    "title": "블로그 소개",
    "url": "/posts/Introduce/",
    "categories": "Blogging",
    "tags": "Blog",
    "date": "2025-01-29 10:28:00 +0900",
    





    
    "snippet": "알고리즘, 자료구조 및 다양한 프로그래밍 관련 내용을 정리한 개인 학습 저장소입니다.",
    "content": "알고리즘, 자료구조 및 다양한 프로그래밍 관련 내용을 정리한 개인 학습 저장소입니다."
  }
  
]

